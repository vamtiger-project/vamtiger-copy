"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var StringConstant,CommandlineArguments,ShortCommandlineArguments,CommandlineArgumentsDescription,path=require("path"),getFolderContent=_interopDefault(require("vamtiger-get-directory-content-recursive")),createFolder=_interopDefault(require("vamtiger-create-directory")),copyFile=_interopDefault(require("vamtiger-copy-file"));!function(e){e.slash="/"}(StringConstant||(StringConstant={})),function(e){e.source="source",e.destination="destination",e.exclude="exclude",e.help="help"}(CommandlineArguments||(CommandlineArguments={})),function(e){e.source="s",e.destination="d",e.exclude="e",e.help="h"}(ShortCommandlineArguments||(ShortCommandlineArguments={})),function(e){e.source="Source path",e.destination="Destination path",e.exclude="Patterns to exclude",e.help="List commandline options"}(CommandlineArgumentsDescription||(CommandlineArgumentsDescription={}));const{slash:slash}=StringConstant;function getGroupedFolders({paths:e}){const t=[];let n,r,o,i=e,s=0;for(;s<e.length&&i.length;s++)o=e[s],n=o.split(slash).length,(r=i.filter(e=>e.split(slash).length===n)).length&&(t.push(r),i=i.filter(e=>!r.includes(e)));return t}async function copy({source:e,destination:t,exclude:n,currentWorkingDirectory:r}){const o=r||process.cwd(),i=n&&new RegExp(n),s=path.resolve(o,e),a=path.resolve(o,t),{directory:l,file:c}=await getFolderContent({path:s,classified:!0}),u=(i&&l.filter(e=>!e.match(i))||l).map(e=>e.replace(s,a)),m=i&&c.filter(e=>!e.match(i))||c,d=getGroupedFolders({paths:u}),p=m.map(e=>({source:e,destination:e.replace(s,a)}));await d.reduce((e,t)=>e.then(()=>Promise.all(t.map(e=>createFolder(e)))),Promise.resolve()),await Promise.all(p.map(copyFile))}module.exports=copy;
//# sourceMappingURL=copy.js.map
